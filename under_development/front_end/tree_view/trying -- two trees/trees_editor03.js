// Generated by CoffeeScript 2.6.1
(function() {
  var InfoPanel, Separator, Starter, starter;

  InfoPanel = class InfoPanel {
    constructor(node) {
      var i, len, ref, triangle;
      this.show_palette = this.show_palette.bind(this);
      this.show_button = this.show_button.bind(this);
      this.change_parent_flex_direction = this.change_parent_flex_direction.bind(this);
      this.change_position = this.change_position.bind(this);
      this.node = node;
      this.position = "top";
      this.button = node.querySelector("button");
      this.palette = node.querySelector("div.position_palette");
      this.button.addEventListener("click", this.show_palette);
      this.palette.addEventListener("mouseleave", this.show_button);
      this.triangle_up = node.querySelector("div.triangle_up");
      this.triangle_down = node.querySelector("div.triangle_down");
      this.triangle_left = node.querySelector("div.triangle_left");
      this.triangle_right = node.querySelector("div.triangle_right");
      ref = [this.triangle_up, this.triangle_down, this.triangle_left, this.triangle_right];
      for (i = 0, len = ref.length; i < len; i++) {
        triangle = ref[i];
        triangle.addEventListener("click", this.change_position);
      }
    }

    show_palette(event) {
      this.button.classList.add("invisible");
      return this.palette.classList.remove("invisible");
    }

    show_button(event) {
      this.button.classList.remove("invisible");
      return this.palette.classList.add("invisible");
    }

    change_parent_flex_direction(new_value) {
      return this.node.parentNode.setAttribute("style", `flex-direction: ${new_value};`);
    }

    change_position(event) {
      if (event.target === this.triangle_up && this.position !== "top") {
        this.change_parent_flex_direction("column");
        return this.position = "top";
      } else if (event.target === this.triangle_left && this.position !== "left") {
        this.change_parent_flex_direction("row");
        return this.position = "left";
      } else if (event.target === this.triangle_down && this.position !== "bottom") {
        this.change_parent_flex_direction("column-reverse");
        return this.position = "bottom";
      } else if (event.target === this.triangle_right && this.position !== "right") {
        this.change_parent_flex_direction("row-reverse");
        return this.position = "right";
      }
    }

  };

  Separator = class Separator {
    constructor(node) {
      this.start_following = this.start_following.bind(this);
      this.follow = this.follow.bind(this);
      this.stop_following = this.stop_following.bind(this);
      this.initial_x = null;
      this.initial_y = null;
      this.node = node;
      this.previous_node = this.node.previousElementSibling;
      this.next_node = this.node.nextElementSibling;
      this.node.addEventListener("dragstart", this.start_following);
    }

    start_following(event) {
      var rect;
      this.previous_node.addEventListener("dragover", this.follow);
      this.previous_node.addEventListener("dragend", this.stop_following);
      this.next_node.addEventListener("dragover", this.follow);
      this.next_node.addEventListener("dragend", this.stop_following);
      this.initial_x = event.clientX;
      this.initial_y = event.clientY;
      rect = this.previous_node.getBoundingClientRect();
      if (rect.height > rect.width) {
        this.size = Math.round(rect.width);
      } else {
        this.size = Math.round(rect.height);
      }
      return this.previous_node.setAttribute("style", `flex-basis: ${this.size}px;`);
    }

    follow(event) {
      var delta, new_size, prev_rect, rect, style_value;
      rect = this.node.getBoundingClientRect();
      prev_rect = this.previous_node.getBoundingClientRect();
      if (rect.height > rect.width) {
        if (prev_rect.x > rect.x) {
          delta = event.clientX - this.initial_x;
          new_size = Math.round(this.size - delta);
        } else {
          delta = event.clientX - this.initial_x;
          new_size = Math.round(this.size + delta);
        }
      } else {
        if (prev_rect.y > rect.y) {
          delta = event.clientY - this.initial_y;
          new_size = Math.round(this.size - delta);
        } else {
          delta = event.clientY - this.initial_y;
          new_size = Math.round(this.size + delta);
        }
      }
      style_value = `flex-basis: ${new_size}px;`;
      return this.previous_node.setAttribute("style", style_value);
    }

    stop_following(event) {
      this.next_node.removeEventListener("dragover", this.follow);
      this.previous_node.removeEventListener("dragover", this.follow);
      this.next_node.removeEventListener("dragend", this.stop_following);
      return this.previous_node.removeEventListener("dragend", this.stop_following);
    }

  };

  Starter = class Starter {
    constructor() {
      var i, len, new_separator, ref, separator;
      this.info = document.querySelector("div.info");
      this.info_panel = new InfoPanel(this.info);
      this.separators = [];
      ref = document.querySelectorAll("div.separator");
      for (i = 0, len = ref.length; i < len; i++) {
        separator = ref[i];
        new_separator = new Separator(separator);
        this.separators.push(new_separator);
      }
    }

  };

  starter = new Starter();

}).call(this);

//# sourceMappingURL=trees_editor03.js.map
