// Generated by CoffeeScript 1.12.7
(function() {
  var ACTIVE, ButtonBox, CONNECTOR_SELECT_INNER_HTML, Connector, Container, EXPANDED, FIRED, Hierarchy, INACTIVE, NO_STATE_YET, Row, SELECT_INNER_HTML, Subform, Widget, hierarchy, span_not_implemented, text_input, the_container, ti, tree,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  tree = {
    cas: {
      equals: {
        verbose: 'equals',
        widget: 'numeral_input_cas'
      },
      verbose: 'CAS RN'
    },
    comment: {
      ends_with: {
        verbose: 'ends with',
        widget: 'text_input'
      },
      exact_match: {
        verbose: 'exact match',
        widget: 'text_input'
      },
      includes: {
        verbose: 'includes',
        widget: 'text_input'
      },
      starts_with: {
        verbose: 'starts with',
        widget: 'text_input'
      },
      verbose: 'Comment'
    },
    molar_mass: {
      equals: {
        verbose: 'equals',
        widget: 'numeral_input'
      },
      equals_with_epsilon: {
        verbose: 'equals with epsilon',
        widget: 'special_numeral_input'
      },
      in_interval_between: {
        verbose: 'in interval between',
        widget: 'two_numeral_inputs'
      },
      less_than: {
        verbose: 'less than',
        widget: 'numeral_input'
      },
      more_than: {
        verbose: 'more than',
        widget: 'numeral_input'
      },
      verbose: 'Molar mass'
    },
    molecular_formula: {
      exact_match: {
        verbose: 'exact match',
        widget: 'formula_text_input'
      },
      includes: {
        verbose: 'includes',
        widget: 'formula_text_input'
      },
      verbose: 'Molecular formula'
    },
    name: {
      ends_with: {
        verbose: 'ends with',
        widget: 'text_input_with_format'
      },
      exact_match: {
        verbose: 'exact match',
        widget: 'text_input_with_format'
      },
      includes: {
        verbose: 'includes',
        widget: 'text_input_with_format'
      },
      starts_with: {
        verbose: 'starts with',
        widget: 'text_input_with_format'
      },
      verbose: 'Name'
    },
    quantity_with_unit: {
      equals: {
        verbose: 'equals',
        widget: 'numeral_and_unit'
      },
      equals_with_epsilon: {
        verbose: 'in interval around',
        widget: 'numeral_epsilon_unit'
      },
      in_interval_between: {
        verbose: 'in interval between',
        widget: 'two_numerals_and_unit'
      },
      less_than: {
        verbose: 'less than',
        widget: 'numeral_and_unit'
      },
      more_than: {
        verbose: 'more than',
        widget: 'numeral_and_unit'
      },
      verbose: 'Quantity'
    },
    storage_place: {
      choose_from_list: {
        verbose: 'choice from the list',
        widget: 'storage_place_input'
      },
      verbose: 'Storage place'
    },
    structure: {
      exact_match: {
        verbose: 'exact match',
        widget: 'jsme_input'
      },
      substructure: {
        verbose: 'substructure',
        widget: 'jsme_input'
      },
      substructure_greedy: {
        verbose: 'substructure (greedy)',
        widget: 'jsme_input'
      },
      verbose: 'Structure'
    },
    synonym: {
      ends_with: {
        verbose: 'ends with',
        widget: 'text_input'
      },
      exact_match: {
        verbose: 'exact match',
        widget: 'text_input'
      },
      includes: {
        verbose: 'includes',
        widget: 'text_input'
      },
      starts_with: {
        verbose: 'starts with',
        widget: 'text_input'
      },
      verbose: 'Synonym'
    },
    when_created: {
      date_before: {
        verbose: 'date before',
        widget: 'date_input'
      },
      date_from: {
        verbose: 'date from',
        widget: 'date_input'
      },
      date_range: {
        verbose: 'date range',
        widget: 'date_range_input'
      },
      verbose: 'Creation date'
    },
    when_updated: {
      date_before: {
        verbose: 'date before',
        widget: 'date_input'
      },
      date_from: {
        verbose: 'date from',
        widget: 'date_input'
      },
      date_range: {
        verbose: 'date range',
        widget: 'date_range_input'
      },
      verbose: 'Last update date'
    },
    who_created: {
      choose_profile_from_list: {
        verbose: 'choice of profile from the list',
        widget: 'select_profile_from_list'
      },
      type: {
        verbose: 'text input',
        widget: 'text_input'
      },
      type_with_prompts: {
        verbose: 'prompted text input',
        widget: 'prompted_text_input'
      },
      verbose: 'Created by'
    },
    who_updated: {
      choose_profile_from_list: {
        verbose: 'choice of profile from the list',
        widget: 'select_profile_from_list'
      },
      type: {
        verbose: 'text input',
        widget: 'text_input'
      },
      type_with_prompts: {
        verbose: 'prompted text input',
        widget: 'prompted_text_input'
      },
      verbose: 'Updated by'
    }
  };

  SELECT_INNER_HTML = '<option value="" selected>Choose search option</option>\n<option value="cas">CAS RN</option>\n<option value="comment">Comment</option>\n<option value="molar_mass">Molar mass</option>\n<option value="molecular_formula">Molecular formula</option>\n<option value="name">Name</option>\n<option value="quantity_with_unit">Quantity</option>\n<option value="storage_place">Storage place</option>\n<option value="structure">Structure</option>\n<option value="synonym">Synonym</option>\n<option value="when_created">Creation date</option>\n<option value="when_updated">Last update date</option>\n<option value="who_created">Created by</option>\n<option value="who_updated">Updated by</option>';

  CONNECTOR_SELECT_INNER_HTML = '<option value="" selected>AND / NOT / AND NOT</option>\n<option value="and">And</option>\n<option value="or">Or</option>\n<option value="and_not">And not</option>';

  Hierarchy = (function() {
    Hierarchy.instance = void 0;

    Hierarchy.counter = 0;

    function Hierarchy(hierarchy_object) {
      if (Hierarchy.counter === 0) {
        this.hierarchy_object = hierarchy_object;
        Hierarchy.counter = 1;
        Hierarchy.instance = this;
      } else {
        return Hierarchy.instance;
      }
    }

    Hierarchy.prototype.make_term_menu_object = function() {
      var key, result;
      result = {};
      for (key in this.hierarchy_object) {
        result[key] = this.hierarchy_object[key].verbose;
      }
      return result;
    };

    Hierarchy.prototype.make_operators_menu_object = function(term) {
      var key, result;
      result = {};
      for (key in this.hierarchy_object[term]) {
        if (key === "verbose" || key === "name") {
          continue;
        } else {
          result[key] = this.hierarchy_object[term][key].verbose;
        }
      }
      return result;
    };

    Hierarchy.what_widget = function(term_name, operator_name) {
      if (term_name in Hierarchy.instance.hierarchy_object) {
        if (operator_name in Hierarchy.instance.hierarchy_object[term_name]) {
          return Hierarchy.instance.hierarchy_object[term_name][operator_name].widget;
        } else {
          throw "term_name IS in @hierarchy_object, BUT " + "operator_name not in @hierarchy_object[term_name][operator_name]";
        }
      } else {
        throw "term_name is not in @hierarchy_object";
      }
    };

    return Hierarchy;

  })();

  span_not_implemented = document.createElement("span");

  span_not_implemented.classList.add("inactive-field");

  span_not_implemented.textContent = 'Not implemented yet';

  Widget = (function() {
    var appendix_content, appendix_functions, name, values_p_content, values_p_functions;

    name = "";

    values_p_content = null;

    appendix_content = null;

    values_p_functions = {};

    appendix_functions = {};

    Widget.instances = {};

    Widget.not_implemented = span_not_implemented;

    function Widget(name) {
      this.p_value_content = null;
      this.appendix_content = null;
      this.p_value_functions = {};
      this.appendix_functions = {};
      this.name = name;
      Widget.instances[name] = this;
    }

    return Widget;

  })();

  ti = document.createElement("input");

  ti.type = 'text';

  ti.classList.add('simple_text_value');

  ti.name = 'text_value';

  text_input = new Widget("text_input");

  text_input.p_value_content = ti;

  hierarchy = new Hierarchy(tree);

  ACTIVE = 1;

  INACTIVE = 2;

  FIRED = 3;

  EXPANDED = 4;

  NO_STATE_YET = 0;

  Container = (function() {
    Container.prototype.instance = void 0;

    Container.prototype.length = 0;

    Container.prototype.subforms_array = [];

    Container.prototype.keys_array = [];

    Container.prototype.form_node = void 0;

    function Container() {
      this.add_rows_pair = bind(this.add_rows_pair, this);
      this.event_processor = bind(this.event_processor, this);
      this.turn_deletion_mode_OFF = bind(this.turn_deletion_mode_OFF, this);
      this.turn_deletion_mode_ON = bind(this.turn_deletion_mode_ON, this);
      if (Container.instance) {
        return Container.instance;
      } else {
        Container.instance = this;
        this.form_node = document.querySelector('form');
        Object.defineProperty(this, "length", {
          get: function() {
            return this.form_node.querySelectorAll('div.row').length;
          }
        });
        this.subforms_array = [new Subform(), new ButtonBox()];
        this.keys_array = [this.subforms_array[0].key, this.subforms_array[1].key];
        return this;
      }
    }

    Container.prototype.calc_bro_index = function(index) {
      if (typeof index !== "number") {
        throw new TypeError("Wrong 'index' type: " + (typeof index));
      } else if (index % 1 !== 0 || index > Container.instance.length || index < 0) {
        throw new Error("Wrong value of 'index': " + index);
      } else if (index % 2 === 0 && index !== Container.instance.length - 2) {
        return index + 1;
      } else {
        return index - 1;
      }
    };

    Container.prototype.turn_deletion_mode_ON = function() {
      var i, len, row, rows;
      rows = this.subforms_array.slice();
      if (rows[rows.length - 1].key === "button_box") {
        rows.pop();
      } else {
        throw Error("Last row isn't button_box");
      }
      for (i = 0, len = rows.length; i < len; i++) {
        row = rows[i];
        row.node.addEventListener("mouseenter", this.event_processor);
        row.node.addEventListener("mouseleave", this.event_processor);
        row.node.addEventListener("click", this.event_processor);
      }
      this.form_node.classList.add("deletion_mode");
      return null;
    };

    Container.prototype.turn_deletion_mode_OFF = function() {
      var i, len, row, rows;
      rows = this.subforms_array.slice();
      if (rows[rows.length - 1].key === "button_box") {
        rows.pop();
      } else {
        throw Error("Last row isn't button_box");
      }
      for (i = 0, len = rows.length; i < len; i++) {
        row = rows[i];
        row.switch_state(ACTIVE);
        row.node.removeEventListener("mouseenter", this.event_processor);
        row.node.removeEventListener("mouseleave", this.event_processor);
        row.node.removeEventListener("click", this.event_processor);
      }
      return this.form_node.classList.remove("deletion_mode");
    };

    Container.prototype.event_processor = function(event) {
      var bro_index, event_target, target_index;
      event_target = event.target;
      while (indexOf.call(event_target.classList, "row") < 0) {
        event_target = event_target.parentNode;
        if (event_target.nodeName === "FORM") {
          throw Error("FORM element achieved");
        }
      }
      target_index = this.keys_array.indexOf(event_target.id);
      bro_index = this.calc_bro_index(target_index);
      if (event.type === "mouseenter") {
        return this.subforms_array[bro_index].switch_state(FIRED);
      } else if (event.type === "mouseleave") {
        return this.subforms_array[bro_index].switch_state(INACTIVE);
      } else if (event.type === "click") {
        this.delete_two_rows(target_index, bro_index);
        return this.update_connectors();
      } else {
        throw new Error("unknown event type");
      }
    };

    Container.prototype.delete_two_rows = function(target_index, bro_index) {
      var less_index;
      if (target_index < bro_index) {
        less_index = target_index;
        this.form_node.children[bro_index].remove();
        this.form_node.children[target_index].remove();
      } else {
        less_index = bro_index;
        this.form_node.children[target_index].remove();
        this.form_node.children[bro_index].remove();
      }
      this.subforms_array.splice(less_index, 2);
      return this.keys_array.splice(less_index, 2);
    };

    Container.prototype.update_connectors = function() {
      var i, key_has_to_be_equal, ref, results, row_number;
      results = [];
      for (row_number = i = 1, ref = this.subforms_array.length - 1; 1 <= ref ? i <= ref : i >= ref; row_number = 1 <= ref ? ++i : --i) {
        if (this.subforms_array[row_number] instanceof Connector) {
          if (this.subforms_array[row_number - 1] instanceof Subform && this.subforms_array[row_number + 1] instanceof Subform) {
            key_has_to_be_equal = this.subforms_array[row_number - 1];
            key_has_to_be_equal += "_plus_";
            key_has_to_be_equal += this.subforms_array[row_number + 1];
            if (!this.subforms_array[row_number].key === key_has_to_be_equal) {
              results.push(this.subforms_array[row_number].node.id = key_has_to_be_equal);
            } else {
              results.push(void 0);
            }
          } else {
            throw new Error("Connector is not between two subforms");
          }
        } else {
          continue;
        }
      }
      return results;
    };

    Container.prototype.add_rows_pair = function() {
      var butbox, new_connector, new_subform, previous_subform_id;
      butbox = document.getElementById("buttons_box");
      previous_subform_id = butbox.previousElementSibling.id;
      new_subform = new Subform();
      butbox.before(new_subform.node);
      new_connector = new Connector(previous_subform_id, new_subform.key);
      new_subform.node.before(new_connector.node);
      this.keys_array = Container.add_to_array_before_last(this.keys_array, new_connector.key);
      this.subforms_array = Container.add_to_array_before_last(this.subforms_array, new_connector);
      this.keys_array = Container.add_to_array_before_last(this.keys_array, new_subform.key);
      return this.subforms_array = Container.add_to_array_before_last(this.subforms_array, new_subform);
    };

    Container.add_to_array_before_last = function(array_to_append, element_to_add) {
      return (array_to_append.slice(0, -1)).concat(element_to_add, array_to_append.slice(-1));
    };

    return Container;

  })();

  Row = (function() {
    var key, node, state_code, switch_state, valid_states;

    valid_states = [];

    node = void 0;

    key = "";

    state_code = NO_STATE_YET;

    switch_state = void 0;

    function Row() {
      this.state_code = ACTIVE;
      this.valid_states = [];
    }

    Row.create_node = function(arg) {
      var class_, class_name, daughters, element, i, id_name, inner_html, j, len, len1, new_node, par, parameters, ref, ref1, ref2, ref3, ref4, ref5, ref6, value;
      element = (ref = arg.element) != null ? ref : 'div', class_name = (ref1 = arg.class_name) != null ? ref1 : '', id_name = (ref2 = arg.id_name) != null ? ref2 : '', parameters = (ref3 = arg.parameters) != null ? ref3 : {}, inner_html = (ref4 = arg.inner_html) != null ? ref4 : '', daughters = (ref5 = arg.daughters) != null ? ref5 : [];
      new_node = document.createElement(element);
      if (class_name !== '' && typeof class_name === "string") {
        ref6 = class_name.split(' ');
        for (i = 0, len = ref6.length; i < len; i++) {
          class_ = ref6[i];
          new_node.classList.add(class_);
        }
      }
      if (id_name !== '' && typeof id_name === "string") {
        new_node.id = id_name;
      }
      if (JSON.stringify(parameters) !== "{}") {
        for (par in parameters) {
          value = parameters[par];
          new_node[par] = value;
        }
      }
      if (typeof inner_html === "string" && inner_html !== "") {
        new_node.innerHTML = inner_html;
      }
      if (JSON.stringify(daughters) !== "[]") {
        for (j = 0, len1 = daughters.length; j < len1; j++) {
          node = daughters[j];
          new_node.append(node);
        }
      }
      return new_node;
    };

    Row.prototype.has_such_class = function(class_name) {
      return indexOf.call(this.classes_list, class_name) >= 0;
    };

    Row.prototype.add_class = function(class_name) {
      if (!this.has_such_class(class_name)) {
        return this.node.classList.add(class_name);
      } else {
        throw new Error("This class already added: " + class_name);
      }
    };

    Row.prototype.delete_class = function(class_name) {
      if (this.has_such_class(class_name)) {
        return this.node.classList.remove(class_name);
      } else {
        throw new Error("Node don't have this class");
      }
    };

    Row.prototype.validate_state = function(state_code) {
      if (typeof this.state_code !== 'number') {
        throw new TypeError("instance state_code " + ("has wrong type: " + (typeof this.state_code)));
      }
      if (typeof state_code !== "number") {
        throw new TypeError("state_code has wrong type: " + (typeof state_code));
      } else if (indexOf.call(this.valid_states, state_code) >= 0) {
        return true;
      } else {
        console.log("valid_states: \n" + this.valid_states);
        throw new Error("State with this code is not " + ("available. State code: " + state_code));
      }
    };

    return Row;

  })();

  Subform = (function(superClass) {
    extend(Subform, superClass);

    Subform.counter = 0;

    function Subform() {
      this.update_widget = bind(this.update_widget, this);
      this.operator_listener = bind(this.operator_listener, this);
      this.update_operator = bind(this.update_operator, this);
      this.term_listener = bind(this.term_listener, this);
      var key_plus_term, p_operator, p_term, p_value, select;
      Subform.__super__.constructor.call(this);
      this.key = "subform" + Subform.counter;
      if (Subform.counter === 0) {
        this.node = document.querySelector('div#' + this.key);
        select = this.node.querySelector("select");
        select.addEventListener("change", this.term_listener);
        p_term = select.parentNode;
        p_operator = this.node.querySelector('p.operator_box');
        p_value = this.node.querySelector('p.value_box');
      } else {
        key_plus_term = this.key + "_term";
        select = Subform.create_node({
          element: "select",
          parameters: {required: "required",
                             name: key_plus_term},
          inner_html: SELECT_INNER_HTML
        });
        p_term = Subform.create_node({
          element: "p",
          class_name: "column",
          daughters: [select]
        });
        p_operator = Subform.create_node({
          element: "p",
          class_name: "operator_box column",
          inner_html: '<span class="inactive-field">Operator</span>'
        });
        p_value = Subform.create_node({
          element: "p",
          class_name: "value_box column",
          inner_html: '<span class="inactive-field">Value</span>'
        });
        this.node = Subform.create_node({
          element: "div",
          class_name: "row",
          id_name: this.key,
          daughters: [p_term, p_operator, p_value]
        });
      }
      this.p_term = p_term;
      this.p_operator = p_operator;
      this.p_value = p_value;
      this.select = select;
      this.select.addEventListener("change", this.term_listener);
      Object.defineProperty(this, "classes_list", {
        get: function() {
          return new Array(this.node.classList);
        }
      });
      Object.defineProperty(this, "subform_no", {
        get: function() {
          return this.node.id;
        }
      });
      this.valid_states = [ACTIVE, INACTIVE, FIRED, EXPANDED];
      this.state_code = 1;
      Subform.counter += 1;
      return this;
    }

    Subform.prototype.switch_state = function(new_state_code) {
      var appendix, element, i, j, len, len1, ref, ref1;
      if (new_state_code === this.state_code) {
        return null;
      }
      this.validate_state(new_state_code);
      if (this.state_code === INACTIVE) {
        ref = this.node.querySelectorAll("[disabled]");
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          element.removeAttribute("disabled");
        }
      } else if (this.state_code === FIRED) {
        this.node.classList.remove("fired");
      } else if (this.state_code === EXPANDED) {
        this.node.querySelector("div.appendix").remove();
      }
      if (new_state_code === INACTIVE) {
        ref1 = this.node.querySelectorAll("select, input[type='text']");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          element = ref1[j];
          element.setAttribute("disabled", "disabled");
        }
      } else if (new_state_code === FIRED) {
        this.node.classList.add("fired");
      } else if (new_state_code === EXPANDED) {
        appendix = Subform.create_node({element: "div",
                class_name: "appendix"});
        this.node.append(appendix);
      }
      return this.state_code = new_state_code;
    };

    Subform.prototype.term_listener = function(event) {
      var operators_menu_object, what_chosen;
      what_chosen = event.target.value;
      operators_menu_object = hierarchy.make_operators_menu_object(what_chosen);
      return this.update_operator(operators_menu_object);
    };

    Subform.prototype.update_operator = function(operators_menu_object) {
      var key, new_select, operators_menu_code, value;
      operators_menu_code = "<option value='' selected>Choose operator</option>";
      for (key in operators_menu_object) {
        value = operators_menu_object[key];
        operators_menu_code += "<option value='" + key + "'>" + value + "</option>";
      }
      new_select = Subform.create_node({
            element: "select",
                parameters: {name: key + "_operator",
                required: "required"},
            inner_html: operators_menu_code,
        });
      this.p_operator.children[0].replaceWith(new_select);
      return new_select.addEventListener("change", this.operator_listener);
    };

    Subform.prototype.operator_listener = function(event) {
      var all_widget_names, chosen_operator, chosen_term, selected_widget_name, the_widget;
      chosen_operator = event.target.value;
      chosen_term = this.p_term.children[0].value;
      selected_widget_name = Hierarchy.what_widget(chosen_term, chosen_operator);
      all_widget_names = Object.keys(Widget.instances);
      if (indexOf.call(all_widget_names, selected_widget_name) >= 0) {
        the_widget = Widget.instances[selected_widget_name];
        return this.update_widget(the_widget);
      } else {
        return this.update_widget("not_implemented");
      }
    };

    Subform.prototype.update_widget = function(widget) {
      if (widget === "not_implemented") {
        return this.p_value.children[0].replaceWith(Widget.not_implemented);
      } else if (widget instanceof Widget) {
        return this.p_value.children[0].replaceWith(widget.p_value_content);
      } else {
        throw new TypeError("Wrong widget type");
      }
    };

    return Subform;

  })(Row);

  Connector = (function(superClass) {
    extend(Connector, superClass);

    Connector.number_up = 0;

    Connector.number_down = 0;

    function Connector(up, down) {
      var div_container, key, select;
      Connector.__super__.constructor.call(this);
      this.valid_states = [ACTIVE, INACTIVE, FIRED];
      this.number_up = up;
      this.number_down = down;
      key = up + "_plus_" + down;
      select = Connector.create_node({
            element: "select",
                parameters: {name: key,
                required: "required"},
            inner_html: CONNECTOR_SELECT_INNER_HTML,
        });
      div_container = Connector.create_node({
        element: "div",
        class_name: "operator_between_box",
        daughters: [select]
      });
      this.node = Connector.create_node({
        element: "div",
        class_name: "row",
        id_name: key,
        daughters: [div_container]
      });
      Object.defineProperty(this, "key", {
        get: function() {
          return this.node.getAttribute("id");
        },
        set: function(value) {
          if (this.node.getAttribute("id") !== value) {
            this.node.removeAttribute("id");
            return this.node.setAttribute("id", value);
          }
        }
      });
    }

    Connector.prototype.switch_state = function(new_state_code) {
      var element, i, j, len, len1, ref, ref1;
      if (new_state_code === this.state_code) {
        return null;
      }
      this.validate_state(new_state_code);
      if (this.state_code === INACTIVE) {
        ref = this.node.querySelectorAll("[disabled]");
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          element.removeAttribute("disabled");
        }
        this.state_code = ACTIVE;
      } else if (this.state_code === FIRED) {
        this.node.classList.remove("fired");
        this.state_code = ACTIVE;
      }
      if (new_state_code === INACTIVE) {
        ref1 = this.node.querySelectorAll("select, input[type='text']");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          element = ref1[j];
          element.setAttribute("disabled", "disabled");
        }
        return this.state_code = INACTIVE;
      } else if (new_state_code === FIRED) {
        this.node.classList.add("fired");
        return this.state_code = FIRED;
      }
    };

    Connector.prototype.write_numbers_to_dom = function() {
      return this.key = this.number_up + "_plus_" + number_down;
    };

    return Connector;

  })(Row);

  ButtonBox = (function(superClass) {
    extend(ButtonBox, superClass);

    ButtonBox.instance = null;

    ButtonBox.prototype.key = "button_box";

    ButtonBox.prototype.button_CREATE = null;

    ButtonBox.prototype.button_DELETE = null;

    ButtonBox.prototype.button_DELETE_shelter = null;

    function ButtonBox() {
      this.when_CREATE_clicked = bind(this.when_CREATE_clicked, this);
      if (ButtonBox.instance) {
        return ButtonBox.instance;
      } else {
        ButtonBox.__super__.constructor.call(this);
        this.valid_states = [ACTIVE, INACTIVE];
        this.key = "button_box";
        this.node = document.getElementById("buttons_box");
        this.button_CREATE = this.node.querySelector("#more_conditions");
        this.button_CREATE.addEventListener("click", this.when_CREATE_clicked);
        this.button_DELETE = this.node.querySelector("#delete_button");
        this.button_DELETE.addEventListener('click', Container.instance.turn_deletion_mode_ON);
        this.button_EXIT = this.node.querySelector("#exit_from_deletion");
        this.button_EXIT.addEventListener('click', Container.instance.turn_deletion_mode_OFF);
        ButtonBox.instance = this;
        return this;
      }
    }

    ButtonBox.prototype.switch_state = function(new_state_code) {
      var element, i, j, len, len1, ref, ref1;
      this.validate_state(new_state_code);
      if (this.state_code === INACTIVE && new_state_code === ACTIVE) {
        ref = this.node.querySelectorAll("[disabled]");
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          if (element.id !== 'more_conditions_disabled') {
            element.removeAttribute("disabled");
          }
        }
        return this.state_code = new_state_code;
      } else if (this.state_code === ACTIVE && new_state_code === INACTIVE) {
        ref1 = this.node.querySelectorAll("button");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          element = ref1[j];
          if (element.id !== 'more_conditions_disabled') {
            element.setAttribute("disabled", "disabled");
          }
        }
        return this.state_code = new_state_code;
      }
    };

    ButtonBox.prototype.when_CREATE_clicked = function(event) {
      Container.instance.add_rows_pair();
      return null;
    };

    return ButtonBox;

  })(Row);

  the_container = new Container();

}).call(this);

//# sourceMappingURL=new7.js.map
