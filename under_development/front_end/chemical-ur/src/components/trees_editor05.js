// Generated by CoffeeScript 2.6.1
/* eslint-disable */;
var Chemical, FrameMaker, ListPoint, Receiver, Storage,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  indexOf = [].indexOf;

export var Tree = (function() {
  class Tree {
    constructor(tree_container, input_name, root, path_to_node, children_storages_url) {
      this.update_field = this.update_field.bind(this);
      this.tree_container_mouse = this.tree_container_mouse.bind(this);
      this.highlight = this.highlight.bind(this);
      this.unhighlight = this.unhighlight.bind(this);
      this.highlight_only_this = this.highlight_only_this.bind(this);
      this.process_click = this.process_click.bind(this);
      this.highlighted_shift_or_ctrl = this.highlighted_shift_or_ctrl.bind(this);
      this.highlighted_no_key = this.highlighted_no_key.bind(this);
      this.unhighlighted_shift = this.unhighlighted_shift.bind(this);
      this.process_span_list = this.process_span_list.bind(this);
      this.highlight_domain = this.highlight_domain.bind(this);
      this.unhighlighted_ctrl = this.unhighlighted_ctrl.bind(this);
      this.unhighlighted_no_key = this.unhighlighted_no_key.bind(this);
      if (Tree.instances.length >= 2) {
        throw Error("can't create more than 2 tree instances");
      } else if (Tree.instances.length === 1) {
        this.number = 1;
      } else {
        this.number = 0;
      }
      Object.defineProperty(this, "other_instance", {
        get: function() {
          if (Tree.instances.length <= 1) {
            return null;
          } else if (Tree.instances.length === 2 && this.number === 0) {
            return Tree.instances[1];
          } else if (Tree.instances.length === 2 && this.number === 1) {
            return Tree.instances[0];
          }
        }
      });
      //there are default (storage_edit) mode, search_form and chemical_edit
      this.mode = "chemical_edit";
      Tree.children_storages_url = children_storages_url;
      this.highlighted_nodes_ids = [];
      this.tree_container = tree_container;
      this.input_node = document.querySelector(`input[name='${input_name}']`);
      this.background = tree_container.querySelector(".background");
      this.foreground = tree_container.querySelector(".foreground");
      if (root !== "error") {
        this.root_object = new Storage(root.name, Number(root.id), null, this, false);
      } else {
        this.root_object = new Storage("error", 0, null, this, false);
      }
      this.root_object.li = this.foreground.querySelector("li");
      this.root_object.span = this.root_object.li.querySelector("span");
      this.root_object.span.addEventListener("dblclick", this.root_object.open_close);
      this.root_object.span.addEventListener("click", this.process_click);
      Tree.instances.push(this);
      this.frame_maker = new FrameMaker(this);
      if (this.mode !== "chemical_edit") {
        this.tree_container.addEventListener("mousedown", this.tree_container_mouse);
        this.tree_container.addEventListener("mouseup", this.tree_container_mouse);
        this.tree_container.addEventListener("mousemove", this.tree_container_mouse);
      }
      this.there_was_mousedown = false;
      if (path_to_node !== void 0) {
        Storage.open_with_path(path_to_node);
      }
    }

    update_field() {
      var full_path_ids, full_path_names, highlighted_node, highlighted_nodes_json, json_for_input, object_for_input;
      highlighted_nodes_json = JSON.stringify(this.highlighted_nodes_ids);
      if (this.mode === "chemical_edit") {
        if (highlighted_nodes_json === "[]") {
          highlighted_node = null;
        } else {
          highlighted_node = this.highlighted_nodes_ids[0];
        }
        [full_path_ids, full_path_names] = Storage.make_full_path(highlighted_node);
        object_for_input = {
          "highlighted_nodes": this.highlighted_nodes_ids,
          "full_path_ids": full_path_ids,
          "full_path_names": full_path_names
        };
        json_for_input = JSON.stringify(object_for_input);
      } else {
        json_for_input = highlighted_nodes_json;
      }
      return this.input_node.value = json_for_input;
    }

    tree_container_mouse(event) {
      var id_of_node, j, len, node, ref;
      if (event.target.nodeName !== "SPAN") {
        if (event.type === "mousedown") {
          return this.there_was_mousedown = true;
        } else if (event.type === "mousemove") {
          return this.there_was_mousedown = false;
        } else if (event.type === "mouseup" && this.there_was_mousedown) {
          ref = this.highlighted_nodes_ids;
          for (j = 0, len = ref.length; j < len; j++) {
            id_of_node = ref[j];
            node = this.foreground.querySelector(`span[data-storage_node_id='${id_of_node}']`);
            node.classList.remove("highlighted");
          }
          this.highlighted_nodes_ids = [];
          this.update_field();
          return this.there_was_mousedown = false;
        }
      }
    }

    highlight(node_id) {
      var node;
      if (this.highlighted_nodes_ids.indexOf(node_id) === -1) {
        this.highlighted_nodes_ids.push(node_id);
        this.update_field();
        node = this.foreground.querySelector(`span[data-storage_node_id='${node_id}']`);
        return node.classList.add("highlighted");
      }
    }

    unhighlight(node_id) {
      var index_in_array, node;
      if (this.highlighted_nodes_ids.indexOf(node_id) !== -1) {
        index_in_array = this.highlighted_nodes_ids.indexOf(node_id);
        this.highlighted_nodes_ids.splice(index_in_array, 1);
        this.update_field();
        node = this.foreground.querySelector(`span[data-storage_node_id='${node_id}']`);
        return node.classList.remove("highlighted");
      }
    }

    highlight_only_this(node_id) {
      var id_of_node, j, len, node, ref;
      ref = this.highlighted_nodes_ids;
      for (j = 0, len = ref.length; j < len; j++) {
        id_of_node = ref[j];
        node = this.foreground.querySelector(`span[data-storage_node_id='${id_of_node}']`);
        node.classList.remove("highlighted");
      }
      this.highlighted_nodes_ids = [];
      this.update_field();
      return this.highlight(node_id);
    }

    process_click(event) {
      var node_id, node_object;
      if (event.target.classList.contains("highlighted")) {
        if (event.shiftKey || event.ctrlKey) {
          return this.highlighted_shift_or_ctrl(event);
        } else {
          return this.highlighted_no_key(event);
        }
      } else {
        if (this.mode === "chemical_edit") {
          node_id = event.target.dataset.storage_node_id;
          node_object = Chemical.chemicals_and_storages[node_id];
          if (node_object instanceof Storage && node_object.is_terminal === true) {
            return this.unhighlighted_no_key(event);
          }
        } else if (event.shiftKey) {
          return this.unhighlighted_shift(event);
        } else if (event.ctrlKey) {
          return this.unhighlighted_ctrl(event);
        } else {
          return this.unhighlighted_no_key(event);
        }
      }
    }

    highlighted_shift_or_ctrl(event) {
      return this.unhighlight(event.target.dataset.storage_node_id);
    }

    highlighted_no_key(event) {
      if (this.highlighted_nodes_ids.length === 1) {
        return this.unhighlight(event.target.dataset.storage_node_id);
      } else if (this.highlighted_nodes_ids.length > 1) {
        return this.highlight_only_this(event.target.dataset.storage_node_id);
      }
    }

    unhighlighted_shift(event) {
      var j, k, len, len1, level, levels, node, spans_level_list, the_ul, uls_spans_level;
      the_ul = this.foreground.querySelector("ul");
      levels = [[the_ul]];
      while (levels[levels.length - 1].length !== 0) {
        levels = this.process_levels(levels);
      }
      uls_spans_level = null;
      for (j = 0, len = levels.length; j < len; j++) {
        level = levels[j];
        if (level.indexOf(event.target) !== -1) {
          uls_spans_level = level;
          break;
        }
      }
      spans_level_list = [];
      for (k = 0, len1 = uls_spans_level.length; k < len1; k++) {
        node = uls_spans_level[k];
        if (node.tagName === "SPAN") {
          spans_level_list.push(node);
        }
      }
      return this.process_span_list(spans_level_list, event.target);
    }

    process_levels(levels) {
      var children_arr, item, j, last_level, len, new_level;
      last_level = levels[levels.length - 1];
      new_level = [];
      for (j = 0, len = last_level.length; j < len; j++) {
        item = last_level[j];
        children_arr = Array.from(item.children);
        Array.prototype.push.apply(new_level, children_arr);
      }
      levels.push(new_level);
      return levels;
    }

    process_span_list(span_list, event_target) {
      var j, len, node, will_continue;
      will_continue = false;
      for (j = 0, len = span_list.length; j < len; j++) {
        node = span_list[j];
        if (node.classList.contains("highlighted")) {
          will_continue = true;
          break;
        }
      }
      if (!will_continue) {
        return null;
      }
      return this.highlight_domain(span_list, event_target);
    }

    highlight_domain(span_list, event_target) {
      var domain_of_numbers, j, k, l, len, number, ref, ref1, ref2, results, target_number;
      domain_of_numbers = [];
      target_number = span_list.indexOf(event_target);
      for (number = j = ref = target_number; (ref <= 0 ? j <= 0 : j >= 0); number = ref <= 0 ? ++j : --j) {
        if (span_list[number].classList.contains("highlighted")) {
          break;
        } else {
          domain_of_numbers.push(number);
          continue;
        }
      }
      if (target_number < span_list.length - 1) {
        for (number = k = ref1 = target_number + 1, ref2 = span_list.length - 1; (ref1 <= ref2 ? k <= ref2 : k >= ref2); number = ref1 <= ref2 ? ++k : --k) {
          if (span_list[number].classList.contains("highlighted")) {
            break;
          } else {
            domain_of_numbers.push(number);
            continue;
          }
        }
      }
      results = [];
      for (l = 0, len = domain_of_numbers.length; l < len; l++) {
        number = domain_of_numbers[l];
        results.push(this.highlight(span_list[number].dataset.storage_node_id));
      }
      return results;
    }

    unhighlighted_ctrl(event) {
      return this.highlight(event.target.dataset.storage_node_id);
    }

    unhighlighted_no_key(event) {
      return this.highlight_only_this(event.target.dataset.storage_node_id);
    }

  };

  Tree.instances = [];

  Tree.children_storages_url = "";

  return Tree;

}).call(this);

Chemical = (function() {
  class Chemical {
    constructor(name, id, parent, tree) {
      this.name = name;
      this.id = id;
      this.parent = parent;
      this.tree = tree;
      this.li = null;
      this.span = null;
      Chemical.chemicals_and_storages[id] = this;
    }

  };

  Chemical.chemicals_and_storages = {};

  return Chemical;

}).call(this);

Storage = class Storage extends Chemical {
  constructor(name, id, parent, tree, is_terminal) {
    super(name, id, parent, tree);
    this.open_close = this.open_close.bind(this);
    this.close = this.close.bind(this);
    this.open = this.open.bind(this);
    this.children = [];
    this.level = null;
    this.is_terminal = is_terminal;
    this.is_open = false;
  }

  static make_full_path(node_id) {
    var full_path_ids, full_path_names, node_instance;
    if (node_id === null) {
      return [[], []];
    } else {
      full_path_ids = [];
      full_path_names = [];
      full_path_ids.push(node_id);
      node_instance = Chemical.chemicals_and_storages[node_id];
      full_path_names.push(node_instance.name);
      while (node_instance.parent !== null) {
        node_instance = node_instance.parent;
        full_path_names.push(node_instance.name);
        full_path_ids.push(node_instance.id);
      }
      full_path_ids.reverse();
      full_path_names.reverse();
      return [full_path_ids, full_path_names];
    }
  }

  static async open_with_path(path_to_node) {
    var children_obj, full_path, i, j, last_node, last_node_id, node_id_to_open, node_to_open, ref;
    full_path = path_to_node.full_path;
    children_obj = path_to_node.children;
    Receiver.register_children(children_obj);
    for (i = j = 0, ref = full_path.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
      node_id_to_open = full_path[i];
      node_to_open = Chemical.chemicals_and_storages[node_id_to_open];
      await node_to_open.open();
    }
    last_node_id = full_path.slice(-1);
    last_node = Chemical.chemicals_and_storages[last_node_id];
    return last_node.tree.highlight(last_node_id);
  }

  open_close(event) {
    boundMethodCheck(this, Storage);
    this.tree.unhighlight(event.target.dataset.storage_node_id);
    if (this.is_open && event.target === this.span) {
      this.close();
    } else {
      if (event.target === this.span) {
        this.open();
      }
    }
    this.tree.frame_maker.destructor();
    return this.tree.frame_maker = new FrameMaker(this.tree);
  }

  close() {
    var ul;
    boundMethodCheck(this, Storage);
    ul = this.li.querySelector("ul");
    ul.remove();
    this.children = [];
    this.is_open = false;
    this.li.classList.remove("open");
    return this.li.classList.add("closed");
  }

  async open() {
    var children;
    boundMethodCheck(this, Storage);
    children = (await Receiver.get_children(this.id));
    this.create_children_from_list(children);
    if (JSON.stringify(children) !== "{}") {
      this.is_open = true;
      this.li.classList.remove("closed");
      return this.li.classList.add("open");
    }
  }

  create_children_from_list(children) {
    var child, i, id, j, len, li, name, ref, results, span, type, ul;
    ul = document.createElement("ul");
    this.li.append(ul);
    ref = [0, children.length - 1];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      name = children[i]["name"];
      id = children[i]["id"];
      type = children[i]["type"];
      if (type === 2) {
        child = new Chemical(name, id, this, this.tree);
      } else if (type === 0) {
        child = new Storage(name, id, this, this.tree, false);
      } else {
        child = new Storage(name, id, this, this.tree, true);
      }
      this.children.push(child);
      li = document.createElement("li");
      span = document.createElement("span");
      span.textContent = name;
      span.setAttribute("data-storage_node_id", id);
      li.append(span);
      ul.append(li);
      child.li = li;
      child.span = span;
      if (child instanceof Storage) {
        span.addEventListener("dblclick", child.open_close);
        span.addEventListener("click", this.tree.process_click);
        results.push(li.classList.add("closed"));
      } else {
        span.addEventListener("click", this.tree.process_click);
        results.push(li.classList.add("chemical"));
      }
    }
    return results;
  }

};

Receiver = (function() {
  class Receiver {
    static call(parent_id) {
      var key, result;
      result = {};
      for (key in this.content) {
        if (this.content[key].parent === parent_id) {
          result[key] = this.content[key].name;
        }
      }
      return result;
    }

    static async get_children(parent_id) {
      var answer, response;
      if (indexOf.call(this.content, parent_id) >= 0) {
        return this.content[parent_id];
      }
      response = (await fetch(Tree.children_storages_url + String(parent_id)));
      if (response.ok) {
        answer = (await response.json());
        Object.assign(this.content, answer);
        return answer;
      } else {
        return "error";
      }
    }

    static register_children(children_obj) {
      return Object.assign(this.content, children_obj);
    }

    static record_creation() {
      return null;
    }

  };

  //    @content = {
  //        1: {name: "One", parent: 0}
  //        2: {name: "Two", parent: 0}
  //        3: {name: "Three", parent: 0}
  //        4: {name: "Four", parent: 2}
  //        "chem5": {name: "Five", parent: 4}
  //    }
  // content format: {1: {name: "One", parent: 0, terminal: false}}
  // where 1 is storage id
  Receiver.debug = true;

  Receiver.content = {};

  return Receiver;

}).call(this);

FrameMaker = class FrameMaker {
  constructor(tree) {
    this.destructor = this.destructor.bind(this);
    this.make_li_list = this.make_li_list.bind(this);
    this.send_event = this.send_event.bind(this);
    this.mousedown_processor = this.mousedown_processor.bind(this);
    this.mousemove_processor = this.mousemove_processor.bind(this);
    this.check_for_intersections = this.check_for_intersections.bind(this);
    this.mouseup_leave_processor = this.mouseup_leave_processor.bind(this);
    this.tree = tree;
    this.anchor = {
      x: 0,
      y: 0
    };
    this.background = tree.background;
    this.foreground = tree.foreground;
    this.foreground.addEventListener("mousedown", this.send_event);
    this.foreground.addEventListener("mouseup", this.send_event);
    this.foreground.addEventListener("mousemove", this.send_event);
    this.foreground.addEventListener("mouseleave", this.send_event);
    this.back_coords = this.background.getBoundingClientRect();
    this.background.addEventListener("mousedown", this.mousedown_processor);
    this.inner_frame = null;
    this.li_list = this.make_li_list();
  }

  destructor() {
    this.foreground.removeEventListener("mousedown", this.send_event);
    this.foreground.removeEventListener("mouseup", this.send_event);
    this.foreground.removeEventListener("mousemove", this.send_event);
    this.foreground.removeEventListener("mouseleave", this.send_event);
    this.background.removeEventListener("mousedown", this.mousedown_processor);
    this.anchor = null;
    this.background = null;
    this.foreground = null;
    this.back_coords = null;
    this.inner_frame = null;
    return this.li_list = null;
  }

  make_li_list() {
    var all_spans, element, j, len, list_point, span_list;
    span_list = [];
    all_spans = this.foreground.querySelectorAll("span");
    for (j = 0, len = all_spans.length; j < len; j++) {
      element = all_spans[j];
      list_point = new ListPoint(element, this.tree);
      span_list.push(list_point);
    }
    return span_list;
  }

  send_event(event) {
    var new_event;
    new_event = new MouseEvent(event.type, {
      bubbles: false,
      cancelable: false,
      clientX: event.clientX,
      clientY: event.clientY
    });
    return this.background.dispatchEvent(new_event);
  }

  mousedown_processor(event) {
    var style_value;
    this.anchor.x = event.clientX - this.back_coords.left;
    this.anchor.y = event.clientY - this.back_coords.top;
    if (this.inner_frame) {
      this.inner_frame.remove();
    }
    this.inner_frame = document.createElement("div");
    this.background.prepend(this.inner_frame);
    style_value = `margin-top: ${this.anchor.y}px; margin-left: ` + `${this.anchor.x}px; width: ${0}px; height: ${0}px;`;
    this.inner_frame.setAttribute("style", style_value);
    this.inner_frame.classList.add("figure");
    this.background.addEventListener("mousemove", this.mousemove_processor);
    this.background.addEventListener("mouseup", this.mouseup_leave_processor);
    return this.background.addEventListener("mouseleave", this.mouseup_leave_processor);
  }

  mousemove_processor(event) {
    var height, margin_left, margin_top, style_value, width, x, y;
    x = event.clientX - this.back_coords.left;
    y = event.clientY - this.back_coords.top;
    margin_left = Math.min(x, this.anchor.x);
    margin_top = Math.min(y, this.anchor.y);
    width = Math.max(x, this.anchor.x) - margin_left;
    height = Math.max(y, this.anchor.y) - margin_top;
    style_value = `margin-top: ${margin_top}px; margin-left: ` + `${margin_left}px; ` + `width: ${width}px; height: ${height}px;`;
    this.inner_frame.setAttribute("style", style_value);
    return this.check_for_intersections(margin_left, margin_top, margin_left + width, margin_top + height);
  }

  check_for_intersections(left, top, right, bottom) {
    var j, len, list_point, ref, results;
    ref = this.li_list;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      list_point = ref[j];
      results.push(list_point.check(left, top, right, bottom, this.back_coords));
    }
    return results;
  }

  mouseup_leave_processor(event) {
    this.inner_frame.remove();
    this.inner_frame = null;
    this.background.removeEventListener("mousemove", this.mousemove_processor);
    this.background.removeEventListener("mouseup", this.mouseup_leave_processor);
    return this.background.removeEventListener("mouseleave", this.mouseup_leave_processor);
  }

};

ListPoint = class ListPoint {
  constructor(node, tree) {
    this.check = this.check.bind(this);
    this.node = node;
    this.tree = tree;
    this.rectangle = node.getBoundingClientRect();
    this.highlighted = false;
  }

  check(left, top, right, bottom, back_coords) {
    var ref, ref1, ref2, ref3, storage_node_id;
    if (((top < (ref = this.rectangle.top - back_coords.top) && ref < bottom) || (top < (ref1 = this.rectangle.bottom - back_coords.top) && ref1 < bottom)) && ((left < (ref2 = this.rectangle.left - back_coords.left) && ref2 < right) || (left < (ref3 = this.rectangle.right - back_coords.left) && ref3 < right))) {
      if (this.highlighted === false) {
        this.node.classList.add("highlighted");
        this.highlighted = true;
        storage_node_id = this.node.dataset.storage_node_id;
        return this.tree.highlight(storage_node_id);
      }
    } else {
      if (this.highlighted === true) {
        this.node.classList.remove("highlighted");
        this.highlighted = false;
        storage_node_id = this.node.dataset.storage_node_id;
        return this.tree.unhighlight(storage_node_id);
      }
    }
  }

};

//# sourceMappingURL=trees_editor05.js.map
